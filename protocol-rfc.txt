





Network Working Group                                       T. Belgacemi
Request for Comments: 2223                                       Epitech
Category: Informational                                    November 2020


                    Protocol client/server communications

Informational

   This memo provides information for the Internet community. This
   memo does not specify an Internet standard of any kind.
   Distribution of this memo is unlimited.

Copyright Notice

   Copyright (C) The Internet Society (1997).  All Rights Reserved.

Table of Contents

   1.   Introduction . . . . . . . . . . . . . . . . . . . . . . . . 1
   2.   Secure Client Connection . . . . . . . . . . . . . . . . . . 1
   3.   Lobby TCP Packages . . . . . . . . . . . . . . . . . . . . . 1
   3a.   Package Creation Lobby  . . . . . . . . . . . . . . . . . . 1
   3b.   Package Reply Creation Lobby  . . . . . . . . . . . . . . . 2
   3c.   Package Join Lobby . . . . . . . . . . . . . . . . . . . .  2
   3d.   Package Reply Join Lobby  . . . . . . . . . . . . . . . . . 2
   3e.   Package Game Started  . . . . . . . . . . . . . . . . . . . 3
   4.   Game UDP Packages . . . . . . . . . . . . . . . . . . . . .  3
   4a.   Package position . . . . . . . . . . . . . . . . . . . . .  3
   4b.   Package Shoot . . . . . . . . . . . . . . . . . . . . .  .  3
   4c.   Package Shoot Entity . . . . . . . . . . . . . . . . . . .  4
   4d.   Package Monster Entity . . . . . . . . . . . . . . . . . .  4























Belgacemi                    Informational                     [Page 1]

RFC 2223       Protocol client/server communications      November 2020


1.  Introduction

   The purpose of this RFC is to define the communication rules using a
   binary protocol between a server and a client.
   Communication is established for the purpose of enabling the proper
   functioning of a 2D multi-player video game, known as R-TYPE.

   The server MUST communicate with the client using UDP protocol.
   However a second communication using the TCP protocol is tolerated
   but a good justification be given.
   In all-games every communications MUST be done in UDP.

2.  Secure Client Connection

   To ensure a good connection between the server and the client we
   decided to use the TCP protocol for the first connection between the
   client and the server.
   The choice of using the TCP protocol is that the first to the server
   connection MUST be secure and no packets should be lost to ensure
   that the client was able to communicate with the server.

3.  Lobby TCP Packages

   Once the secure connection is established between the client and the
   server, the client MAY send two TCP types of packets to the server.
   And MUST return two other types of packets for responses.

   3a.  Package Creation Lobby

      The first packet is to ask the server to create a new game, the
      packet is called createNewGame.

      The first variable in the packet MUST contain the type of the
      packet.

      Once the createNewGame packet arrives at the server, the server
      will create a lobby for the client and send a packet confirming
      the creation of the lobby, the packet is called
      replyLobbyCreated.

      The first variable in the packet MUST contain the type of the
      packet.

      The second variable MUST contain a std::size_t idGame to see
      which lobby the client is in.

      The client MUST send this packet if they want to be the creator
      of the lobby.





Belgacemi                    Informational                     [Page 2]

RFC 2223       Protocol client/server communications      November 2020

   3b.  Package Reply Creation Lobby

      The first response packet concerns the createNewGame packet, as
      soon as the server receives the createNewGame packet from the
      client the server will create a lobby and send the
      replyGameCreated packet back to the server

      The first variable in the packet MUST contain the type of the
      packet.

      The second variable MUST contain a std :: size_t idGame for the
      identifier of the lobby in which to connect.

      The third variable MUST be the player's index in the lobby.

   3c.  Package Join Lobby

      The second package is to ask the server to join an already
      existing lobby, the package is called connectionLobby.

      The first variable in the packet MUST contain the type of the
      packet.

      The second variable MUST contain a std::size_t idGame for the
      identifier of the lobby in which to connect.

      The client MUST enter the lobby identifier if he wants to send
      the packet connectionLobby.

   3d.  Package Reply Join Lobby

      The second response packet concerns the connectionLobby packet,
      as soon as the server receives the connectionLobby packet from
      the client the server will make the client join the lobby
      concerned by the first request.

      The first variable in the packet MUST contain the type of the
      packet.

      The second variable MUST contain a std::size_t idGame for the
      identifier of the lobby in which to connect.

      The client MUST enter the lobby identifier if he wants to send
      the packet connectionLobby.








Belgacemi                    Informational                     [Page 3]

RFC 2223       Protocol client/server communications      November 2020

   3c.  Package Game Started

      The last packet sent by TCP protocol will be the packet notifying
      all clients that the game is now launched. The package is called
      gameStarted.

      The first variable in the packet MUST contain the type of the
      packet.

      Once the packet has been sent, all packets sent whether on the
      server or client side MUST now be in UDP protocol.

4.  Game UDP Packages

   Once the creator of the lobby has decided to launch the game alone
   or with others, the game will start and all the requests that will
   now pass between the server and the client will be in UDP.

   4a.  Package position

      When the game is launched, the server will send the client the
      position of all the players present on the game, the package is
      called position.

      The first variable in the packet MUST contain the type of the
      packet.

      The second variable MUST contain a int senderIndex for the
      identifier of the player in the game.

      The third variable MUST contain a std::size_t idGame to see
      which game the client is in.

      The fourth variable MUST contain a Engine::Position pos to know
      the position of the player entity.

   4b.  Package Shoot

      When the player presses space the client MUST send a packet to
      notify the server that the client has shot, the packet is named
      shoot.

      The first variable in the packet MUST contain the type of the
      packet.

      The second variable MUST contain a int senderIndex for the
      identifier of the player in the game.

      The third variable MUST contain a std::size_t idGame to see
      which game the client is in.

      The fourth variable MUST contain a Engine::Position pos to know
      the position of the shoot entity.


Belgacemi                    Informational                     [Page 4]

RFC 2223       Protocol client/server communications      November 2020

   4c.  Package Shoot Entity

      When the client sends a shoot package to the server and the shoot
      hits an entity on the server, the server sends the client a
      ShootEntity package.

      The first variable in the packet MUST contain the type of the
      packet.

      The second variable MUST contain a Engine::Position pos for the
      position of the entity in the game.

      The third variable MUST contain a Engine::Hitbox shootHitbox
      which gives the hitbox of the entity.

      The fourth variable MUST contain a Engine::Status status the
      status of the entity.

      The fifth variable MUST contain the Entity serverEntityId of the
      entity on the server.

   4d.  Package Shoot Entity

      When the server wants to send a monster to the client, it sends
      him the Monster Entity packet.

      The first variable in the packet MUST contain the type of the
      packet.

      The second variable MUST contain a Engine::Hitbox shootHitbox
      which gives the hitbox of the entity.

      The third variable MUST contain a Engine::Status status the
      status of the entity.

      The fourth variable MUST contain the Entity serverEntityId of the
      entity on the server.

      The fifth variable MUST contain the path to the monster image.













Belgacemi                    Informational                     [Page 5]